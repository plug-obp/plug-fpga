-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity murmur3_32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    key_empty_n : IN STD_LOGIC;
    key_read : OUT STD_LOGIC;
    len : IN STD_LOGIC_VECTOR (63 downto 0);
    seed : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of murmur3_32 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "murmur3_32,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=477,HLS_SYN_LUT=565,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_CC9E2D51 : STD_LOGIC_VECTOR (31 downto 0) := "11001100100111100010110101010001";
    constant ap_const_lv32_16A88000 : STD_LOGIC_VECTOR (31 downto 0) := "00010110101010001000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1B873593 : STD_LOGIC_VECTOR (31 downto 0) := "00011011100001110011010110010011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_E6546B64 : STD_LOGIC_VECTOR (31 downto 0) := "11100110010101000110101101100100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_85EBCA6B : STD_LOGIC_VECTOR (31 downto 0) := "10000101111010111100101001101011";
    constant ap_const_lv32_C2B2AE35 : STD_LOGIC_VECTOR (31 downto 0) := "11000010101100101010111000110101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal key_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_122_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_reg_326 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_2_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_3_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal h_3_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal h_5_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_5_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_6_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_6_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_12_reg_356 : STD_LOGIC_VECTOR (18 downto 0);
    signal h_7_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_7_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal h_8_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_8_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_13_reg_371 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_reg_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_108_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal k_1_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_178_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_2_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_4_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_225_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_7_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    h_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                h_reg_99 <= h_3_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_99 <= seed;
            end if; 
        end if;
    end process;

    i1_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_reg_90 <= i_1_reg_312;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_90 <= i_2_fu_118_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_reg_317 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                h_5_reg_346 <= h_5_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                h_6_reg_351 <= h_6_fu_245_p2;
                tmp_12_reg_356 <= h_6_fu_245_p2(31 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                h_7_reg_361 <= h_7_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                h_8_reg_366 <= h_8_fu_268_p2;
                tmp_13_reg_371 <= h_8_fu_268_p2(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((key_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_312 <= i_1_fu_122_p2;
                k_reg_306 <= key_dout;
                tmp_9_reg_317 <= tmp_9_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_2_reg_331 <= k_2_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_3_reg_336 <= k_3_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_6_reg_326 <= k_1_fu_134_p2(31 downto 17);
                tmp_reg_321 <= tmp_fu_139_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, key_empty_n, ap_CS_fsm_state2, tmp_9_reg_317, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((key_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((tmp_9_reg_317 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (tmp_7_fu_283_p1 xor h_8_reg_366);
    h_1_fu_167_p2 <= (k_3_reg_336 xor h_reg_99);
    h_2_fu_192_p2 <= (tmp_4_fu_188_p1 or tmp_3_fu_172_p2);
    h_3_fu_210_p2 <= std_logic_vector(unsigned(tmp_10_fu_198_p2) + unsigned(tmp1_fu_204_p2));
    h_4_fu_219_p2 <= (tmp_11_fu_216_p1 xor h_3_fu_210_p2);
    h_5_fu_239_p2 <= (tmp_2_fu_235_p1 xor h_4_fu_219_p2);
    h_6_fu_245_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_85EBCA6B) * signed(h_5_reg_346))), 32));
    h_7_fu_263_p2 <= (tmp_5_fu_260_p1 xor h_6_reg_351);
    h_8_fu_268_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_C2B2AE35) * signed(h_7_reg_361))), 32));
    i_1_fu_122_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(i1_reg_90));
    i_2_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_108_p4),64));
    i_fu_108_p4 <= len(63 downto 2);
    k_1_fu_134_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_CC9E2D51) * signed(k_reg_306))), 32));
    k_2_fu_157_p2 <= (tmp_reg_321 or tmp_1_fu_154_p1);
    k_3_fu_162_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1B873593) * signed(k_2_reg_331))), 32));

    key_blk_n_assign_proc : process(key_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_blk_n <= key_empty_n;
        else 
            key_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    key_read_assign_proc : process(key_empty_n, ap_CS_fsm_state2)
    begin
        if (((key_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            key_read <= ap_const_logic_1;
        else 
            key_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_204_p2 <= std_logic_vector(signed(ap_const_lv32_E6546B64) + signed(h_2_fu_192_p2));
    tmp_10_fu_198_p2 <= std_logic_vector(shift_left(unsigned(h_2_fu_192_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_11_fu_216_p1 <= len(32 - 1 downto 0);
        tmp_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_326),32));

        tmp_2_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_225_p4),32));

    tmp_3_fu_172_p2 <= std_logic_vector(shift_left(unsigned(h_1_fu_167_p2),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
        tmp_4_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_178_p4),32));

        tmp_5_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_356),32));

        tmp_7_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_371),32));

    tmp_8_fu_178_p4 <= h_1_fu_167_p2(31 downto 19);
    tmp_9_fu_128_p2 <= "1" when (i_1_fu_122_p2 = ap_const_lv64_0) else "0";
    tmp_fu_139_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_16A88000) * signed(k_reg_306))), 32));
    tmp_s_fu_225_p4 <= h_4_fu_219_p2(31 downto 16);
end behav;

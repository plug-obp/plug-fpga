// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _murmur3_HH_
#define _murmur3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct murmur3 : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > seed_ap_vld;
    sc_in< sc_logic > key_ap_vld;
    sc_in< sc_lv<32> > key;
    sc_in< sc_lv<32> > seed;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    murmur3(sc_module_name name);
    SC_HAS_PROCESS(murmur3);

    ~murmur3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > seed_ap_vld_in_sig;
    sc_signal< sc_logic > key_ap_vld_in_sig;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > key_preg;
    sc_signal< sc_lv<32> > key_in_sig;
    sc_signal< sc_logic > key_ap_vld_preg;
    sc_signal< sc_lv<32> > seed_preg;
    sc_signal< sc_lv<32> > seed_in_sig;
    sc_signal< sc_logic > seed_ap_vld_preg;
    sc_signal< sc_logic > key_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > seed_blk_n;
    sc_signal< sc_lv<32> > seed_read_reg_250;
    sc_signal< sc_lv<32> > seed_read_reg_250_pp0_iter1_reg;
    sc_signal< sc_lv<15> > tmp_1_reg_255;
    sc_signal< sc_lv<17> > tmp_5_reg_260;
    sc_signal< sc_lv<32> > k_2_fu_120_p2;
    sc_signal< sc_lv<32> > k_2_reg_265;
    sc_signal< sc_lv<32> > h_4_fu_198_p2;
    sc_signal< sc_lv<32> > h_4_reg_270;
    sc_signal< sc_lv<32> > h_5_fu_204_p2;
    sc_signal< sc_lv<32> > h_5_reg_275;
    sc_signal< sc_lv<19> > tmp_7_reg_280;
    sc_signal< sc_lv<32> > h_6_fu_222_p2;
    sc_signal< sc_lv<32> > h_6_reg_285;
    sc_signal< sc_lv<32> > h_7_fu_227_p2;
    sc_signal< sc_lv<32> > h_7_reg_290;
    sc_signal< sc_lv<16> > tmp_8_reg_295;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<32> > k_fu_82_p1;
    sc_signal< sc_lv<32> > tmp_fu_88_p1;
    sc_signal< sc_lv<32> > k_fu_82_p2;
    sc_signal< sc_lv<32> > tmp_fu_88_p2;
    sc_signal< sc_lv<32> > k_1_fu_114_p3;
    sc_signal< sc_lv<32> > h_fu_126_p2;
    sc_signal< sc_lv<19> > tmp_2_fu_130_p1;
    sc_signal< sc_lv<13> > tmp_3_fu_134_p4;
    sc_signal< sc_lv<17> > tmp_4_fu_152_p1;
    sc_signal< sc_lv<32> > h_1_fu_144_p3;
    sc_signal< sc_lv<32> > tmp1_fu_166_p2;
    sc_signal< sc_lv<32> > p_shl_fu_156_p4;
    sc_signal< sc_lv<32> > h_2_fu_172_p2;
    sc_signal< sc_lv<32> > h_3_fu_178_p2;
    sc_signal< sc_lv<16> > tmp_6_fu_184_p4;
    sc_signal< sc_lv<32> > tmp_s_fu_194_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_219_p1;
    sc_signal< sc_lv<32> > tmp_10_fu_242_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to5;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_CC9E2D51;
    static const sc_lv<32> ap_const_lv32_16A88000;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1B873593;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_E6546B64;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_85EBCA6B;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_C2B2AE35;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_clk_pos_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to5();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_h_1_fu_144_p3();
    void thread_h_2_fu_172_p2();
    void thread_h_3_fu_178_p2();
    void thread_h_4_fu_198_p2();
    void thread_h_5_fu_204_p2();
    void thread_h_6_fu_222_p2();
    void thread_h_7_fu_227_p2();
    void thread_h_fu_126_p2();
    void thread_k_1_fu_114_p3();
    void thread_k_2_fu_120_p2();
    void thread_k_fu_82_p1();
    void thread_k_fu_82_p2();
    void thread_key_ap_vld_in_sig();
    void thread_key_blk_n();
    void thread_key_in_sig();
    void thread_p_shl_fu_156_p4();
    void thread_seed_ap_vld_in_sig();
    void thread_seed_blk_n();
    void thread_seed_in_sig();
    void thread_tmp1_fu_166_p2();
    void thread_tmp_10_fu_242_p1();
    void thread_tmp_2_fu_130_p1();
    void thread_tmp_3_fu_134_p4();
    void thread_tmp_4_fu_152_p1();
    void thread_tmp_6_fu_184_p4();
    void thread_tmp_9_fu_219_p1();
    void thread_tmp_fu_88_p1();
    void thread_tmp_fu_88_p2();
    void thread_tmp_s_fu_194_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

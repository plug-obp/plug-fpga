// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="murmur3,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=364,HLS_SYN_LUT=402,HLS_VERSION=2018_3}" *)

module murmur3 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        seed_ap_vld,
        key_ap_vld,
        key,
        seed,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   seed_ap_vld;
input   key_ap_vld;
input  [31:0] key;
input  [31:0] seed;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    seed_ap_vld_in_sig;
reg    key_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] key_preg;
reg   [31:0] key_in_sig;
reg    key_ap_vld_preg;
reg   [31:0] seed_preg;
reg   [31:0] seed_in_sig;
reg    seed_ap_vld_preg;
reg    key_blk_n;
wire    ap_block_pp0_stage0;
reg    seed_blk_n;
reg   [31:0] seed_read_reg_250;
reg   [31:0] seed_read_reg_250_pp0_iter1_reg;
reg   [14:0] tmp_1_reg_255;
reg   [16:0] tmp_5_reg_260;
wire   [31:0] k_2_fu_120_p2;
reg   [31:0] k_2_reg_265;
wire  signed [31:0] h_4_fu_198_p2;
reg  signed [31:0] h_4_reg_270;
wire   [31:0] h_5_fu_204_p2;
reg   [31:0] h_5_reg_275;
reg   [18:0] tmp_7_reg_280;
wire  signed [31:0] h_6_fu_222_p2;
reg  signed [31:0] h_6_reg_285;
wire   [31:0] h_7_fu_227_p2;
reg   [31:0] h_7_reg_290;
reg   [15:0] tmp_8_reg_295;
reg    ap_block_pp0_stage0_subdone;
wire  signed [31:0] k_fu_82_p1;
wire  signed [31:0] tmp_fu_88_p1;
wire   [31:0] k_fu_82_p2;
wire   [31:0] tmp_fu_88_p2;
wire  signed [31:0] k_1_fu_114_p3;
wire   [31:0] h_fu_126_p2;
wire   [18:0] tmp_2_fu_130_p1;
wire   [12:0] tmp_3_fu_134_p4;
wire   [16:0] tmp_4_fu_152_p1;
wire   [31:0] h_1_fu_144_p3;
wire   [31:0] tmp1_fu_166_p2;
wire   [31:0] p_shl_fu_156_p4;
wire   [31:0] h_2_fu_172_p2;
wire   [31:0] h_3_fu_178_p2;
wire   [15:0] tmp_6_fu_184_p4;
wire   [31:0] tmp_s_fu_194_p1;
wire   [31:0] tmp_9_fu_219_p1;
wire   [31:0] tmp_10_fu_242_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 key_preg = 32'd0;
#0 key_ap_vld_preg = 1'b0;
#0 seed_preg = 32'd0;
#0 seed_ap_vld_preg = 1'b0;
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        key_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            key_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (key_ap_vld == 1'b1))) begin
            key_ap_vld_preg <= key_ap_vld;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        key_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (key_ap_vld == 1'b1))) begin
            key_preg <= key;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        seed_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seed_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (seed_ap_vld == 1'b1))) begin
            seed_ap_vld_preg <= seed_ap_vld;
        end
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        seed_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (seed_ap_vld == 1'b1))) begin
            seed_preg <= seed;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        h_4_reg_270 <= h_4_fu_198_p2;
        h_5_reg_275 <= h_5_fu_204_p2;
        h_6_reg_285 <= h_6_fu_222_p2;
        h_7_reg_290 <= h_7_fu_227_p2;
        tmp_7_reg_280 <= {{h_5_fu_204_p2[31:13]}};
        tmp_8_reg_295 <= {{h_7_fu_227_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_2_reg_265 <= k_2_fu_120_p2;
        seed_read_reg_250 <= seed_in_sig;
        seed_read_reg_250_pp0_iter1_reg <= seed_read_reg_250;
        tmp_1_reg_255 <= {{k_fu_82_p2[31:17]}};
        tmp_5_reg_260 <= {{tmp_fu_88_p2[31:15]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((key_ap_vld == 1'b1)) begin
        key_ap_vld_in_sig = key_ap_vld;
    end else begin
        key_ap_vld_in_sig = key_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_blk_n = key_ap_vld;
    end else begin
        key_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((key_ap_vld == 1'b1)) begin
        key_in_sig = key;
    end else begin
        key_in_sig = key_preg;
    end
end

always @ (*) begin
    if ((seed_ap_vld == 1'b1)) begin
        seed_ap_vld_in_sig = seed_ap_vld;
    end else begin
        seed_ap_vld_in_sig = seed_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        seed_blk_n = seed_ap_vld;
    end else begin
        seed_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((seed_ap_vld == 1'b1)) begin
        seed_in_sig = seed;
    end else begin
        seed_in_sig = seed_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (key_ap_vld_in_sig == 1'b0) | (seed_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (key_ap_vld_in_sig == 1'b0) | (seed_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (key_ap_vld_in_sig == 1'b0) | (seed_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = (tmp_10_fu_242_p1 ^ h_7_reg_290);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign h_1_fu_144_p3 = {{tmp_2_fu_130_p1}, {tmp_3_fu_134_p4}};

assign h_2_fu_172_p2 = (tmp1_fu_166_p2 + p_shl_fu_156_p4);

assign h_3_fu_178_p2 = (h_2_fu_172_p2 ^ 32'd4);

assign h_4_fu_198_p2 = (tmp_s_fu_194_p1 ^ h_3_fu_178_p2);

assign h_5_fu_204_p2 = ($signed(32'd2246822507) * $signed(h_4_reg_270));

assign h_6_fu_222_p2 = (tmp_9_fu_219_p1 ^ h_5_reg_275);

assign h_7_fu_227_p2 = ($signed(32'd3266489909) * $signed(h_6_reg_285));

assign h_fu_126_p2 = (seed_read_reg_250_pp0_iter1_reg ^ k_2_reg_265);

assign k_1_fu_114_p3 = {{tmp_5_reg_260}, {tmp_1_reg_255}};

assign k_2_fu_120_p2 = ($signed({{1'b0}, {32'd461845907}}) * $signed(k_1_fu_114_p3));

assign k_fu_82_p1 = key_in_sig;

assign k_fu_82_p2 = ($signed(32'd3432918353) * $signed(k_fu_82_p1));

assign p_shl_fu_156_p4 = {{{tmp_4_fu_152_p1}, {tmp_3_fu_134_p4}}, {2'd0}};

assign tmp1_fu_166_p2 = ($signed(32'd3864292196) + $signed(h_1_fu_144_p3));

assign tmp_10_fu_242_p1 = tmp_8_reg_295;

assign tmp_2_fu_130_p1 = h_fu_126_p2[18:0];

assign tmp_3_fu_134_p4 = {{h_fu_126_p2[31:19]}};

assign tmp_4_fu_152_p1 = h_fu_126_p2[16:0];

assign tmp_6_fu_184_p4 = {{h_3_fu_178_p2[31:16]}};

assign tmp_9_fu_219_p1 = tmp_7_reg_280;

assign tmp_fu_88_p1 = key_in_sig;

assign tmp_fu_88_p2 = ($signed({{1'b0}, {32'd380141568}}) * $signed(tmp_fu_88_p1));

assign tmp_s_fu_194_p1 = tmp_6_fu_184_p4;

endmodule //murmur3

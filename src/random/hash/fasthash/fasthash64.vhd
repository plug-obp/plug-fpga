-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fasthash64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData : IN STD_LOGIC_VECTOR (63 downto 0);
    len : IN STD_LOGIC_VECTOR (63 downto 0);
    step : IN STD_LOGIC_VECTOR (1 downto 0);
    seed : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fasthash64 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fasthash64,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.459000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=59,HLS_SYN_FF=3142,HLS_SYN_LUT=3269,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_2127599BF4325C37 : STD_LOGIC_VECTOR (63 downto 0) := "0010000100100111010110011001101111110100001100100101110000110111";
    constant ap_const_lv64_880355F21E6D1965 : STD_LOGIC_VECTOR (63 downto 0) := "1000100000000011010101011111001000011110011011010001100101100101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_fu_156_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_709 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_8_fu_434_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal v_8_reg_714 : STD_LOGIC_VECTOR (55 downto 0);
    signal sel_tmp5_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_756 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_521_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_8_fu_616_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_766 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal h_loc_fu_622_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_loc_reg_771 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_reg_776 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal h_new_fu_677_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_5_fu_138_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_142_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_2_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_138_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_162_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_2_fu_196_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_14_fu_220_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal v1_1_fu_212_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_25_fu_238_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_15_fu_230_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_18_fu_248_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_242_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sel_tmp4_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_3_fu_258_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_19_fu_280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_290_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_2_fu_272_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_24_cast_fu_298_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sel_tmp6_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_4_fu_302_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_21_fu_322_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_332_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v1_3_fu_314_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_28_cast_fu_340_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sel_tmp8_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_5_fu_344_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_23_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_374_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_4_fu_356_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_32_cast_fu_382_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sel_tmp1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_6_fu_386_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_38_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v1_5_fu_398_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_34_cast_fu_410_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal v_7_fu_414_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_26_fu_420_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_27_fu_430_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp22_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp23_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_505_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_526_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp21_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_551_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_561_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_566_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_582_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_596_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_590_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_610_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_651_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_651_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_657_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_fu_671_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp10_fu_684_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_505_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component fasthash64_mul_63ns_56ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fasthash64_mul_64s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fasthash64_mul_63ns_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fasthash64_mul_63ns_56ns_64_5_1_U1 : component fasthash64_mul_63ns_56ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 56,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_505_p0,
        din1 => grp_fu_505_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p2);

    fasthash64_mul_64s_64s_64_5_1_U2 : component fasthash64_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_880355F21E6D1965,
        din1 => len,
        ce => ap_const_logic_1,
        dout => grp_fu_521_p2);

    fasthash64_mul_63ns_64s_64_5_1_U3 : component fasthash64_mul_63ns_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_551_p0,
        din1 => v_reg_709,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);

    fasthash64_mul_64s_64s_64_5_1_U4 : component fasthash64_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_880355F21E6D1965,
        din1 => tmp_30_reg_756,
        ce => ap_const_logic_1,
        dout => grp_fu_556_p2);

    fasthash64_mul_64s_64s_64_5_1_U5 : component fasthash64_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_880355F21E6D1965,
        din1 => tmp_8_reg_766,
        ce => ap_const_logic_1,
        dout => grp_fu_638_p2);

    fasthash64_mul_63ns_64s_64_5_1_U6 : component fasthash64_mul_63ns_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_651_p0,
        din1 => grp_fu_651_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_reg_735 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                h <= h_new_fu_677_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_729 = ap_const_lv1_0) and (sel_tmp7_reg_724 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                h_loc_reg_771 <= h_loc_fu_622_p3;
                tmp_32_reg_776 <= h_loc_fu_622_p3(63 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sel_tmp5_reg_719 <= sel_tmp5_fu_476_p2;
                sel_tmp7_reg_724 <= sel_tmp7_fu_482_p2;
                sel_tmp9_reg_729 <= sel_tmp9_fu_488_p2;
                tmp_39_reg_735 <= step(1 downto 1);
                v_8_reg_714 <= v_8_fu_434_p2;
                v_reg_709 <= v_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_729 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_1_reg_751 <= tmp_1_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_729 = ap_const_lv1_0) and (sel_tmp7_reg_724 = ap_const_lv1_1) and (sel_tmp5_reg_719 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_30_reg_756 <= tmp_30_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_751 = ap_const_lv1_1) and (sel_tmp9_reg_729 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_3_reg_761 <= grp_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_729 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_8_reg_766 <= tmp_8_fu_616_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv64_0 when (sel_tmp9_reg_729(0) = '1') else 
        sel_tmp10_fu_684_p3;
    grp_fu_505_p0 <= ap_const_lv64_2127599BF4325C37(63 - 1 downto 0);
    grp_fu_505_p1 <= grp_fu_505_p10(56 - 1 downto 0);
    grp_fu_505_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_8_reg_714),64));
    grp_fu_551_p0 <= ap_const_lv64_2127599BF4325C37(63 - 1 downto 0);
    grp_fu_651_p0 <= ap_const_lv64_2127599BF4325C37(63 - 1 downto 0);
    grp_fu_651_p1 <= (tmp_33_fu_643_p1 xor h_loc_reg_771);
    h_loc_fu_622_p3 <= 
        grp_fu_556_p2 when (sel_tmp5_reg_719(0) = '1') else 
        h;
    h_new_fu_677_p3 <= 
        grp_fu_638_p2 when (sel_tmp9_reg_729(0) = '1') else 
        ap_const_lv64_0;
    icmp_fu_576_p2 <= "0" when (tmp_16_fu_566_p4 = ap_const_lv63_0) else "1";
    p_s_fu_582_p3 <= 
        tmp_4_fu_561_p2 when (icmp_fu_576_p2(0) = '1') else 
        ap_const_lv64_1;
    result_fu_671_p2 <= (tmp_37_fu_667_p1 xor grp_fu_651_p2);
    sel_tmp10_fu_684_p3 <= 
        result_fu_671_p2 when (sel_tmp7_reg_724(0) = '1') else 
        ap_const_lv64_0;
    sel_tmp1_fu_392_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_1) else "0";
    sel_tmp2_fu_206_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_5) else "0";
    sel_tmp3_fu_440_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_7) else "0";
    sel_tmp4_fu_266_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_4) else "0";
    sel_tmp5_fu_476_p2 <= (tmp26_fu_470_p2 or tmp23_fu_452_p2);
    sel_tmp6_fu_308_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_3) else "0";
    sel_tmp7_fu_482_p2 <= "1" when (step = ap_const_lv2_3) else "0";
    sel_tmp8_fu_350_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_2) else "0";
    sel_tmp9_fu_488_p2 <= "1" when (step = ap_const_lv2_2) else "0";
    sel_tmp_fu_172_p2 <= "1" when (tmp_5_fu_138_p1 = ap_const_lv3_6) else "0";
    tmp21_fu_540_p2 <= (tmp_29_fu_536_p1 xor grp_fu_505_p2);
    tmp22_fu_446_p2 <= (sel_tmp_fu_172_p2 or sel_tmp2_fu_206_p2);
    tmp23_fu_452_p2 <= (tmp22_fu_446_p2 or sel_tmp3_fu_440_p2);
    tmp24_fu_458_p2 <= (sel_tmp6_fu_308_p2 or sel_tmp4_fu_266_p2);
    tmp25_fu_464_p2 <= (sel_tmp8_fu_350_p2 or sel_tmp1_fu_392_p2);
    tmp26_fu_470_p2 <= (tmp25_fu_464_p2 or tmp24_fu_458_p2);
    tmp_10_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_596_p4),64));
    tmp_11_fu_162_p4 <= inData(55 downto 48);
    tmp_12_fu_178_p4 <= inData(47 downto 40);
    tmp_13_fu_188_p3 <= 
        ap_const_lv8_0 when (sel_tmp_fu_172_p2(0) = '1') else 
        tmp_11_fu_162_p4;
    tmp_14_fu_220_p4 <= inData(39 downto 32);
    tmp_15_fu_230_p3 <= (tmp_14_fu_220_p4 & ap_const_lv32_0);
    tmp_16_fu_566_p4 <= tmp_4_fu_561_p2(63 downto 1);
    tmp_17_fu_242_p2 <= (tmp_25_fu_238_p1 or tmp_15_fu_230_p3);
    tmp_18_fu_248_p4 <= v1_1_fu_212_p3(55 downto 40);
    tmp_19_fu_280_p4 <= inData(31 downto 24);
    tmp_1_fu_515_p2 <= "1" when (h = ap_const_lv64_0) else "0";
    tmp_20_fu_290_p3 <= (tmp_19_fu_280_p4 & ap_const_lv24_0);
    tmp_21_fu_322_p4 <= inData(23 downto 16);
    tmp_22_fu_332_p3 <= (tmp_21_fu_322_p4 & ap_const_lv16_0);
    tmp_23_fu_364_p4 <= inData(15 downto 8);
    tmp_24_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_290_p3),56));
    tmp_24_fu_374_p3 <= (tmp_23_fu_364_p4 & ap_const_lv8_0);
    tmp_25_fu_238_p1 <= v1_1_fu_212_p3(40 - 1 downto 0);
    tmp_26_fu_420_p4 <= v_7_fu_414_p2(55 downto 23);
    tmp_27_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_420_p4),56));
    tmp_28_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_332_p3),56));
    tmp_28_fu_526_p4 <= grp_fu_505_p2(63 downto 47);
    tmp_29_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_526_p4),64));
    tmp_2_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_142_p4),64));
    tmp_30_fu_546_p2 <= (tmp21_fu_540_p2 xor h);
    tmp_32_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_374_p3),56));
    tmp_33_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_776),64));
    tmp_34_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_406_p1),56));
    tmp_36_fu_657_p4 <= grp_fu_651_p2(63 downto 47);
    tmp_37_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_657_p4),64));
    tmp_38_fu_406_p1 <= inData(8 - 1 downto 0);
    tmp_4_fu_561_p2 <= (tmp_3_reg_761 xor seed);
    tmp_5_fu_138_p0 <= len;
    tmp_5_fu_138_p1 <= tmp_5_fu_138_p0(3 - 1 downto 0);
    tmp_6_fu_590_p3 <= 
        p_s_fu_582_p3 when (tmp_1_reg_751(0) = '1') else 
        h;
    tmp_7_fu_142_p4 <= inData(63 downto 23);
    tmp_8_fu_616_p2 <= (tmp_fu_610_p2 xor tmp_10_fu_606_p1);
    tmp_fu_610_p2 <= (tmp_6_fu_590_p3 xor grp_fu_551_p2);
    tmp_s_fu_596_p4 <= grp_fu_551_p2(63 downto 47);
    v1_1_fu_212_p3 <= 
        ap_const_lv56_0 when (sel_tmp2_fu_206_p2(0) = '1') else 
        v_2_fu_196_p4;
    v1_2_fu_272_p3 <= 
        ap_const_lv56_0 when (sel_tmp4_fu_266_p2(0) = '1') else 
        v_3_fu_258_p3;
    v1_3_fu_314_p3 <= 
        ap_const_lv56_0 when (sel_tmp6_fu_308_p2(0) = '1') else 
        v_4_fu_302_p2;
    v1_4_fu_356_p3 <= 
        ap_const_lv56_0 when (sel_tmp8_fu_350_p2(0) = '1') else 
        v_5_fu_344_p2;
    v1_5_fu_398_p3 <= 
        ap_const_lv56_0 when (sel_tmp1_fu_392_p2(0) = '1') else 
        v_6_fu_386_p2;
    v_2_fu_196_p4 <= ((tmp_13_fu_188_p3 & tmp_12_fu_178_p4) & ap_const_lv40_0);
    v_3_fu_258_p3 <= (tmp_18_fu_248_p4 & tmp_17_fu_242_p2);
    v_4_fu_302_p2 <= (v1_2_fu_272_p3 xor tmp_24_cast_fu_298_p1);
    v_5_fu_344_p2 <= (v1_3_fu_314_p3 xor tmp_28_cast_fu_340_p1);
    v_6_fu_386_p2 <= (v1_4_fu_356_p3 xor tmp_32_cast_fu_382_p1);
    v_7_fu_414_p2 <= (v1_5_fu_398_p3 xor tmp_34_cast_fu_410_p1);
    v_8_fu_434_p2 <= (v_7_fu_414_p2 xor tmp_27_fu_430_p1);
    v_fu_156_p2 <= (tmp_2_fu_152_p1 xor inData);
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hash_table_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    config_r : IN STD_LOGIC_VECTOR (5 downto 0);
    config_r_ap_vld : IN STD_LOGIC;
    isFull : OUT STD_LOGIC_VECTOR (0 downto 0);
    isIn : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hash_table_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hash_table_hls,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.597000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=8303,HLS_SYN_LUT=11016,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal config_r_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal config_r_ap_vld_preg : STD_LOGIC := '0';
    signal config_r_ap_vld_in_sig : STD_LOGIC;
    signal mem_isFilled_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_isFilled_ce0 : STD_LOGIC;
    signal mem_isFilled_we0 : STD_LOGIC;
    signal mem_isFilled_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_config_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem_config_ce0 : STD_LOGIC;
    signal mem_config_we0 : STD_LOGIC;
    signal mem_config_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal config_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_172_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal hash_1_fu_215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_i_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_229_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_reg_292 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal index_fu_235_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_reg_298 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_303 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mem_isFilled_addr_reg_309 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal index_cast1_fu_244_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal index_cast1_reg_314 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_319 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_7_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_328 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal mem_config_addr_1_gep_fu_118_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_i_reg_127 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal i_i_reg_139 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal index_0_in_reg_150 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tmp_fu_178_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_i_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_i_cast_fu_190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_199_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_i_fu_194_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_i_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_i_fu_205_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal hash_fu_221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_263_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component hash_table_hls_mem_isFilled IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_table_hls_mem_config IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    mem_isFilled_U : component hash_table_hls_mem_isFilled
    generic map (
        DataWidth => 1,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_isFilled_address0,
        ce0 => mem_isFilled_ce0,
        we0 => mem_isFilled_we0,
        d0 => ap_const_lv1_1,
        q0 => mem_isFilled_q0);

    mem_config_U : component hash_table_hls_mem_config
    generic map (
        DataWidth => 6,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_config_address0,
        ce0 => mem_config_ce0,
        we0 => mem_config_we0,
        d0 => config_r_preg,
        q0 => mem_config_q0);





    ap_CS_fsm_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;


    config_r_ap_vld_preg_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            config_r_ap_vld_preg <= ap_const_logic_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (config_r_ap_vld = ap_const_logic_1))) then 
                config_r_ap_vld_preg <= config_r_ap_vld;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((grp_fu_160_p2 = ap_const_lv1_1) or (tmp_5_reg_319 = ap_const_lv1_0)))) then 
                config_r_ap_vld_preg <= ap_const_logic_0;
            end if; 
        end if;
    end process;


    config_r_preg_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            config_r_preg <= ap_const_lv6_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (config_r_ap_vld = ap_const_logic_1))) then 
                config_r_preg <= config_r;
            end if; 
        end if;
    end process;


    hash_i_reg_127_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            hash_i_reg_127 <= ap_const_lv16_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((exitcond_i_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                hash_i_reg_127 <= hash_1_fu_215_p2;
            elsif (((config_r_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                hash_i_reg_127 <= ap_const_lv16_7;
            end if; 
        end if;
    end process;


    i_i_reg_139_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            i_i_reg_139 <= ap_const_lv3_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((exitcond_i_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_reg_139 <= i_fu_172_p2;
            elsif (((config_r_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_139 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;


    index_0_in_reg_150_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            index_0_in_reg_150 <= ap_const_lv16_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((tmp_5_reg_319 = ap_const_lv1_1) and (grp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                index_0_in_reg_150 <= tmp_9_cast_fu_268_p1;
            elsif (((exitcond_i_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_0_in_reg_150 <= hash_i_reg_127;
            end if; 
        end if;
    end process;


    index_cast1_reg_314_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            index_cast1_reg_314(0) <= '0';
            index_cast1_reg_314(1) <= '0';
            index_cast1_reg_314(2) <= '0';
            index_cast1_reg_314(3) <= '0';
            index_cast1_reg_314(4) <= '0';
            index_cast1_reg_314(5) <= '0';
            index_cast1_reg_314(6) <= '0';
            index_cast1_reg_314(7) <= '0';
            index_cast1_reg_314(8) <= '0';
            index_cast1_reg_314(9) <= '0';
            index_cast1_reg_314(10) <= '0';
            index_cast1_reg_314(11) <= '0';
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                                index_cast1_reg_314(11 downto 0) <= index_cast1_fu_244_p1(11 downto 0);
            end if; 
        end if;
    end process;


    index_reg_298_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            index_reg_298 <= ap_const_lv12_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                index_reg_298 <= index_fu_235_p1;
            end if; 
        end if;
    end process;


    mem_isFilled_addr_reg_309_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            mem_isFilled_addr_reg_309 <= ap_const_lv12_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                mem_isFilled_addr_reg_309 <= tmp_2_fu_239_p1(12 - 1 downto 0);
            end if; 
        end if;
    end process;


    tmp_1_reg_292_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            tmp_1_reg_292 <= ap_const_lv13_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((exitcond_i_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_1_reg_292 <= tmp_1_fu_229_p2;
            end if; 
        end if;
    end process;


    tmp_2_reg_303_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            tmp_2_reg_303(0) <= '0';
            tmp_2_reg_303(1) <= '0';
            tmp_2_reg_303(2) <= '0';
            tmp_2_reg_303(3) <= '0';
            tmp_2_reg_303(4) <= '0';
            tmp_2_reg_303(5) <= '0';
            tmp_2_reg_303(6) <= '0';
            tmp_2_reg_303(7) <= '0';
            tmp_2_reg_303(8) <= '0';
            tmp_2_reg_303(9) <= '0';
            tmp_2_reg_303(10) <= '0';
            tmp_2_reg_303(11) <= '0';
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                                tmp_2_reg_303(11 downto 0) <= tmp_2_fu_239_p1(11 downto 0);
            end if; 
        end if;
    end process;


    tmp_5_reg_319_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            tmp_5_reg_319 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_5_reg_319 <= tmp_5_fu_252_p2;
            end if; 
        end if;
    end process;


    tmp_7_reg_328_assign_proc : process(ap_rst_n_inv, ap_clk)
    begin
        if (ap_rst_n_inv = '1') then
            tmp_7_reg_328 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_7_reg_328 <= tmp_7_fu_258_p2;
            end if; 
        end if;
    end process;

    tmp_2_reg_303(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    index_cast1_reg_314(12) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, config_r_ap_vld_in_sig, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_i_fu_166_p2, tmp_5_reg_319, ap_CS_fsm_state6, grp_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((config_r_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((grp_fu_160_p2 = ap_const_lv1_1) or (tmp_5_reg_319 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(tmp_5_reg_319, ap_CS_fsm_state6, grp_fu_160_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((grp_fu_160_p2 = ap_const_lv1_1) or (tmp_5_reg_319 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_5_reg_319, ap_CS_fsm_state6, grp_fu_160_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((grp_fu_160_p2 = ap_const_lv1_1) or (tmp_5_reg_319 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    config_r_ap_vld_in_sig <= config_r_ap_vld_preg;

    config_r_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            config_r_blk_n <= ap_const_logic_0;
        else 
            config_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_i_fu_166_p2 <= "1" when (i_i_reg_139 = ap_const_lv3_4) else "0";
    grp_fu_160_p2 <= "1" when (mem_config_q0 = config_r_preg) else "0";
    hash_1_fu_215_p2 <= std_logic_vector(unsigned(tmp_5_i_fu_211_p1) + unsigned(tmp_4_i_fu_205_p2));
    hash_fu_221_p1 <= hash_i_reg_127(12 - 1 downto 0);
    i_fu_172_p2 <= std_logic_vector(unsigned(i_i_reg_139) + unsigned(ap_const_lv3_1));
    index_cast1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_298),13));
    index_fu_235_p1 <= index_0_in_reg_150(12 - 1 downto 0);

    isFull_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_5_reg_319, tmp_7_fu_258_p2, tmp_7_reg_328, ap_CS_fsm_state6, grp_fu_160_p2)
    begin
        if (((tmp_7_reg_328 = ap_const_lv1_1) and (tmp_5_reg_319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            isFull <= ap_const_lv1_1;
        elsif ((((grp_fu_160_p2 = ap_const_lv1_1) and (tmp_5_reg_319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            isFull <= ap_const_lv1_0;
        else 
            isFull <= ap_const_lv1_0;
        end if; 
    end process;


    isIn_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_5_reg_319, tmp_7_fu_258_p2, tmp_7_reg_328, ap_CS_fsm_state6, grp_fu_160_p2)
    begin
        if (((tmp_7_reg_328 = ap_const_lv1_1) and (tmp_5_reg_319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            isIn <= grp_fu_160_p2;
        elsif (((grp_fu_160_p2 = ap_const_lv1_1) and (tmp_5_reg_319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            isIn <= ap_const_lv1_1;
        elsif (((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            isIn <= ap_const_lv1_0;
        else 
            isIn <= ap_const_lv1_0;
        end if; 
    end process;

    mem_config_addr_1_gep_fu_118_p3 <= tmp_2_reg_303(12 - 1 downto 0);

    mem_config_address0_assign_proc : process(tmp_2_reg_303, ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_7_fu_258_p2, mem_config_addr_1_gep_fu_118_p3)
    begin
        if ((((tmp_7_fu_258_p2 = ap_const_lv1_1) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            mem_config_address0 <= mem_config_addr_1_gep_fu_118_p3;
        elsif (((tmp_5_fu_252_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_config_address0 <= tmp_2_reg_303(12 - 1 downto 0);
        else 
            mem_config_address0 <= "000000000000";--"XXXXXXXXXXXX";
        end if; 
    end process;


    mem_config_ce0_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_7_fu_258_p2)
    begin
        if ((((tmp_7_fu_258_p2 = ap_const_lv1_1) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_5_fu_252_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            mem_config_ce0 <= ap_const_logic_1;
        else 
            mem_config_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_config_we0_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_7_fu_258_p2)
    begin
        if (((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_config_we0 <= ap_const_logic_1;
        else 
            mem_config_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_isFilled_address0_assign_proc : process(ap_CS_fsm_state4, tmp_2_fu_239_p1, mem_isFilled_addr_reg_309, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_isFilled_address0 <= mem_isFilled_addr_reg_309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_isFilled_address0 <= tmp_2_fu_239_p1(12 - 1 downto 0);
        else 
            mem_isFilled_address0 <= "000000000000";--"XXXXXXXXXXXX";
        end if; 
    end process;


    mem_isFilled_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_isFilled_ce0 <= ap_const_logic_1;
        else 
            mem_isFilled_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_isFilled_we0_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_252_p2, tmp_7_fu_258_p2)
    begin
        if (((tmp_7_fu_258_p2 = ap_const_lv1_0) and (tmp_5_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mem_isFilled_we0 <= ap_const_logic_1;
        else 
            mem_isFilled_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_229_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(tmp_cast_fu_225_p1));
    tmp_1_i_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_182_p3),6));
    tmp_1_i_fu_182_p3 <= (tmp_fu_178_p1 & ap_const_lv3_0);
    tmp_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_235_p1),64));
    tmp_2_i_fu_194_p2 <= std_logic_vector(shift_right(unsigned(config_r_preg),to_integer(unsigned('0' & tmp_1_i_cast_fu_190_p1(6-1 downto 0)))));
    tmp_3_fu_199_p2 <= std_logic_vector(shift_left(unsigned(hash_i_reg_127),to_integer(unsigned('0' & ap_const_lv16_5(16-1 downto 0)))));
    tmp_4_fu_247_p2 <= "0" when (index_cast1_fu_244_p1 = tmp_1_reg_292) else "1";
    tmp_4_i_fu_205_p2 <= std_logic_vector(unsigned(tmp_3_fu_199_p2) - unsigned(hash_i_reg_127));
    tmp_5_fu_252_p2 <= (tmp_4_fu_247_p2 and mem_isFilled_q0);
    tmp_5_i_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_fu_194_p2),16));
    tmp_7_fu_258_p2 <= "1" when (index_cast1_fu_244_p1 = tmp_1_reg_292) else "0";
    tmp_9_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_263_p2),16));
    tmp_9_fu_263_p2 <= std_logic_vector(unsigned(index_cast1_reg_314) + unsigned(ap_const_lv13_1));
    tmp_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hash_fu_221_p1),13));
    tmp_fu_178_p1 <= i_i_reg_139(2 - 1 downto 0);
end behav;
